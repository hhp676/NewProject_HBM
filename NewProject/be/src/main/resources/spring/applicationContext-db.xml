<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
    default-autowire="byName">

    <bean id="dataSource" class="com.hginfo.hbm.be.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSourceHbm" key="hbm"></entry>
              <!--  <entry value-ref="dataSourceTest" key="test"></entry>-->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSourceHbm">
        </property>
    </bean>

    <!-- datasource jndi -->
  <!--  <bean id="dataSourceHbm" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/hbm" /> </bean>
    <bean id="dataSourceTest" class="org.springframework.jndi.JndiObjectFactoryBean"> 
        <property name="jndiName" value="java:comp/env/jdbc/test" /> </bean>-->

    <!-- 链接池 建议开发使用 -->
    <bean id="dataSourceHbm" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
      <!--  <property name="connectionProperties"  value="config.decrypt=true;config.decrypt.key=${jdbc.publickey.hbm}" />-->
        <!--基本属性url、user、password -->
        <property name="url" value="${jdbc.driverUrl.hbm}" />
        <property name="username" value="${jdbc.username.hbm}" />
        <property name="password"  value="${jdbc.password.hbm}" />
        <!--配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="${jdbc.maxActive.hbm}" />
       <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow"
        value="false" />
        <property name="testOnReturn" value="false" />
        <!--打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
        value="20" />
        <!--配置数据库密码加密、监控统计拦截的filters -->
        <property name="filters" value="config,stat" />
    </bean>

   <!--  <bean id="dataSourceTest" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close"> <property name="connectionProperties" 
        value="config.decrypt=true;config.decrypt.key=${jdbc.publickey.test}" /> 
       &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;<property name="url" value="${jdbc.driverUrl.test}"
        /> <property name="username" value="${jdbc.username.test}" /> <property name="password" 
        value="${jdbc.password.test}" /> &lt;!&ndash;配置初始化大小、最小、最大 &ndash;&gt;<property name="initialSize"
        value="1" /> <property name="minIdle" value="1" /> <property name="maxActive" 
        value="${jdbc.maxActive.test}" /> &lt;!&ndash;配置获取连接等待超时的时间 &ndash;&gt;<property name="maxWait"
        value="60000" />&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;<property name="timeBetweenEvictionRunsMillis"
        value="60000" /> &lt;!&ndash;配置一个连接在池中最小生存的时间，单位是毫秒&ndash;&gt; <property name="minEvictableIdleTimeMillis"
        value="300000" /> <property name="validationQuery" value="SELECT 'x'" /> 
        <property name="testWhileIdle" value="true" /> <property name="testOnBorrow" 
        value="false" /> <property name="testOnReturn" value="false" /> &lt;!&ndash;打开PSCache，并且指定每个连接上PSCache的大小&ndash;&gt;
        <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
        value="20" /> &lt;!&ndash;配置数据库密码加密、监控统计拦截的filters&ndash;&gt; <property name="filters" value="config,stat"
        /> </bean>
-->
</beans>